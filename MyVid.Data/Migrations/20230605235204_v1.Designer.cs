// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyVid.Data;

#nullable disable

namespace MyVid.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230605235204_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MyVid.Core.Models.Actor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Actores", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Comentario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ContenidoComentario")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContenidoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Comentarios", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Contenido", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Director")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("Duracion")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("URLPoster")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("URLVideo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Contenidos", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.ContenidoActor", b =>
                {
                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.Property<int>("ActorID")
                        .HasColumnType("int");

                    b.HasKey("ContenidoID", "ActorID");

                    b.HasIndex("ActorID");

                    b.ToTable("ContenidoActores", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.ContenidoGenero", b =>
                {
                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.Property<int>("GeneroID")
                        .HasColumnType("int");

                    b.HasKey("ContenidoID", "GeneroID");

                    b.HasIndex("GeneroID");

                    b.ToTable("ContenidoGeneros", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.ContenidoIdioma", b =>
                {
                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.Property<int>("IdiomaID")
                        .HasColumnType("int");

                    b.HasKey("ContenidoID", "IdiomaID");

                    b.HasIndex("IdiomaID");

                    b.ToTable("ContenidoIdiomas", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Episodio", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<string>("RutaArchivo")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("TemporadaID")
                        .HasColumnType("int");

                    b.Property<string>("Título")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("TemporadaID");

                    b.ToTable("Episodios", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Genero", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Generos", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Idioma", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Idiomas", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.ListaReproduccion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("ListasReproduccion", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.ListaReproduccionContenido", b =>
                {
                    b.Property<int>("ListaReproduccionID")
                        .HasColumnType("int");

                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.HasKey("ListaReproduccionID", "ContenidoID");

                    b.HasIndex("ContenidoID");

                    b.ToTable("ListaReproduccionContenido", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Pelicula", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Calificacion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContenidoID");

                    b.ToTable("Peliculas", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Serie", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContenidoID");

                    b.ToTable("Series", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Temporada", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Número")
                        .HasColumnType("int");

                    b.Property<int>("SerieID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SerieID");

                    b.ToTable("Temporadas", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Valoracion", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ContenidoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioID")
                        .HasColumnType("int");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ContenidoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Valoraciones", (string)null);
                });

            modelBuilder.Entity("MyVid.Core.Models.Comentario", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("Comentarios")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyVid.Core.Models.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MyVid.Core.Models.ContenidoActor", b =>
                {
                    b.HasOne("MyVid.Core.Models.Actor", "Actor")
                        .WithMany("ContenidoActores")
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("ContenidoActores")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Contenido");
                });

            modelBuilder.Entity("MyVid.Core.Models.ContenidoGenero", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("ContenidoGeneros")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyVid.Core.Models.Genero", "Genero")
                        .WithMany("ContenidoGeneros")
                        .HasForeignKey("GeneroID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("MyVid.Core.Models.ContenidoIdioma", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("ContenidoIdiomas")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyVid.Core.Models.Idioma", "Idioma")
                        .WithMany("ContenidoIdiomas")
                        .HasForeignKey("IdiomaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");

                    b.Navigation("Idioma");
                });

            modelBuilder.Entity("MyVid.Core.Models.Episodio", b =>
                {
                    b.HasOne("MyVid.Core.Models.Temporada", "Temporada")
                        .WithMany("Episodios")
                        .HasForeignKey("TemporadaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Temporada");
                });

            modelBuilder.Entity("MyVid.Core.Models.ListaReproduccion", b =>
                {
                    b.HasOne("MyVid.Core.Models.Usuario", "Usuario")
                        .WithMany("ListasReproduccion")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MyVid.Core.Models.ListaReproduccionContenido", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("ListaReproduccionContenido")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyVid.Core.Models.ListaReproduccion", "ListaReproduccion")
                        .WithMany("ListaReproduccionContenido")
                        .HasForeignKey("ListaReproduccionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");

                    b.Navigation("ListaReproduccion");
                });

            modelBuilder.Entity("MyVid.Core.Models.Pelicula", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("Peliculas")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");
                });

            modelBuilder.Entity("MyVid.Core.Models.Serie", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("Series")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");
                });

            modelBuilder.Entity("MyVid.Core.Models.Temporada", b =>
                {
                    b.HasOne("MyVid.Core.Models.Serie", "Serie")
                        .WithMany("Temporadas")
                        .HasForeignKey("SerieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MyVid.Core.Models.Valoracion", b =>
                {
                    b.HasOne("MyVid.Core.Models.Contenido", "Contenido")
                        .WithMany("Valoraciones")
                        .HasForeignKey("ContenidoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MyVid.Core.Models.Usuario", "Usuario")
                        .WithMany("Valoraciones")
                        .HasForeignKey("UsuarioID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contenido");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("MyVid.Core.Models.Actor", b =>
                {
                    b.Navigation("ContenidoActores");
                });

            modelBuilder.Entity("MyVid.Core.Models.Contenido", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("ContenidoActores");

                    b.Navigation("ContenidoGeneros");

                    b.Navigation("ContenidoIdiomas");

                    b.Navigation("ListaReproduccionContenido");

                    b.Navigation("Peliculas");

                    b.Navigation("Series");

                    b.Navigation("Valoraciones");
                });

            modelBuilder.Entity("MyVid.Core.Models.Genero", b =>
                {
                    b.Navigation("ContenidoGeneros");
                });

            modelBuilder.Entity("MyVid.Core.Models.Idioma", b =>
                {
                    b.Navigation("ContenidoIdiomas");
                });

            modelBuilder.Entity("MyVid.Core.Models.ListaReproduccion", b =>
                {
                    b.Navigation("ListaReproduccionContenido");
                });

            modelBuilder.Entity("MyVid.Core.Models.Serie", b =>
                {
                    b.Navigation("Temporadas");
                });

            modelBuilder.Entity("MyVid.Core.Models.Temporada", b =>
                {
                    b.Navigation("Episodios");
                });

            modelBuilder.Entity("MyVid.Core.Models.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("ListasReproduccion");

                    b.Navigation("Valoraciones");
                });
#pragma warning restore 612, 618
        }
    }
}
